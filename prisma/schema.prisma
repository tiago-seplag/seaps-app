generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id   String @id @default(uuid())
  name String @unique

  properties Property[]
  persons    Person[]
  checklists Checklist[]

  @@map("organizations")
}

model User {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique()
  cpf              String      @unique()
  password         String?
  avatar           String?
  role             ROLES       @default(EVALUATOR)
  is_active        Boolean     @default(false)
  is_deleted       Boolean     @default(false)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @default(now()) @updatedAt()
  checklist        Checklist[]
  checklistCreated Checklist[] @relation("created_by")

  @@map("users")
}

enum ROLES {
  ADMIN
  SUPERVISOR
  EVALUATOR
}

model Person {
  id              String   @id @default(uuid())
  organization_id String
  name            String
  email           String?  @unique()
  phone           String?
  role            String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt()

  organization Organization @relation(fields: [organization_id], references: [id])
  checklist    Checklist[]
  property     Property[]

  @@map("persons")
}

model Property {
  id              String   @id @default(uuid())
  organization_id String
  person_id       String?
  name            String
  address         String?
  type            String   @default("OWN")
  location        String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt()

  organization Organization @relation(fields: [organization_id], references: [id])
  person       Person?      @relation(fields: [person_id], references: [id])

  checklist Checklist[]

  @@map("properties")
}

model Model {
  id          String   @id @unique @default(uuid())
  name        String
  description String?
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt()

  modelItems ModelItems[]
  checklist  Checklist[]

  @@map("models")
}

model Item {
  id         String   @id @unique @default(uuid())
  item_id    String?
  level      Int      @default(0)
  name       String
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt()

  items          Item[]           @relation("items")
  item           Item?            @relation("items", fields: [item_id], references: [id])
  checklistItems ChecklistItems[]
  modelItems     ModelItems[]

  @@map("items")
}

model Checklist {
  id              String    @id @unique @default(uuid())
  sid             String
  status          STATUS    @default(OPEN)
  organization_id String
  model_id        String
  property_id     String
  user_id         String?
  created_by      String?
  person_id       String?
  score           Float     @default(0)
  classification  Int?
  finished_at     DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt()

  organization   Organization     @relation(fields: [organization_id], references: [id])
  property       Property         @relation(fields: [property_id], references: [id])
  user           User?            @relation(fields: [user_id], references: [id])
  createdBy      User?            @relation("created_by", fields: [created_by], references: [id])
  person         Person?          @relation(fields: [person_id], references: [id])
  model          Model?           @relation(fields: [model_id], references: [id])
  checklistItems ChecklistItems[]

  @@map("checklists")
}

model ModelItems {
  id         String   @id @default(uuid())
  model_id   String
  item_id    String
  order      Float
  created_at DateTime @default(now())

  model Model @relation(fields: [model_id], references: [id], onDelete: Cascade)
  item  Item  @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@map("model_items")
}

enum STATUS {
  OPEN
  CLOSED
}

model ChecklistItems {
  id           String   @id @default(uuid())
  checklist_id String
  item_id      String
  score        Int?
  observation  String?
  image        String?
  is_inspected Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt()

  checklist Checklist             @relation(fields: [checklist_id], references: [id], onDelete: Cascade)
  item      Item                  @relation(fields: [item_id], references: [id], onDelete: Cascade)
  images    ChecklistItemImages[]

  @@map("checklist_items")
}

model ChecklistItemImages {
  id                String   @id @default(uuid())
  checklist_item_id String
  image             String
  observation       String?
  created_at        DateTime @default(now())

  checklistItemId ChecklistItems @relation(fields: [checklist_item_id], references: [id], onDelete: Cascade)

  @@map("checklist_item_images")
}
